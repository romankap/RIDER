clc; clear;
% -------- Global Variables --------
SAT_ENTRIES = 2^17;
GCT_ENTRIES = 2^16;

PAGE_BYTES = 2^12;
BLOCK_BYTES = 2^6;
BITS_PER_BLOCK = BLOCK_BYTES*8;
PAGE_ROWS = PAGE_BYTES/BLOCK_BYTES;

BIT_MEAN_WRITES = 1e8;
BIT_VAR_WRITES = 0.25*BIT_MEAN_WRITES;

PAGES_NUM = 1000;

% -------- ECP Parameters --------
ECP_MAX_ERRORS_CORRECTED = 6;

% -------- Execution --------

%init
total_working_pages = PAGES_NUM;
pages = zeros(PAGE_ROWS, BITS_PER_BLOCK, PAGES_NUM);
for i = 1:PAGES_NUM
    pages(:, :, i) = round(normrnd(BIT_MEAN_WRITES, BIT_VAR_WRITES, PAGE_ROWS, BITS_PER_BLOCK));
end
active_pages_array = ones(1,PAGES_NUM);



%writes
WRITES_START = 0; 
MAX_WRITES = 1e8; 
WRITES_RESOLUTION = 250; 
WRITES_DELTA = (MAX_WRITES-WRITES_START)/WRITES_RESOLUTION;

% perform "virtual" writes
iter_counter=0;
for writes_performed = WRITES_START:WRITES_DELTA:MAX_WRITES
    % iterate over all active pages
    for page_num = find(active_pages_array>0)
        [xi, yi, vi] = find( writes_performed>pages(:,:,page_num) );
        if ~isempty(xi)
            AA=full(sparse(xi,yi,vi));
            BB=sum(AA'>0);

            if ~isempty(find(BB>ECP_MAX_ERRORS_CORRECTED, 1)) 
                active_pages_array(page_num) = 0;
            end
        end
    end
    
    fprintf("iteration %d: working pages = %d\n", writes_performed/10^6, sum(active_pages_array(:)));
    iter_counter = iter_counter+1;
end
fprintf("iteration %d: working pages = %d\n", writes_performed/10^6, sum(active_pages_array(:)));






%------------------
% Aux functions
%------------------
