classdef MemoryArray
    %MEMORYARRAY Summary of this class goes here
    %   Detailed explanation goes here
    
    properties
        SAT_ENTRIES = 2^17;
        GCT_ENTRIES = 2^16;
        PAGE_BYTES;
        BLOCK_BYTES; 
        PAGES_NUM; %1000;
        PAGE_ROWS;
        BITS_PER_BLOCK;
        ROWS_IN_MEMORY;

        BIT_MEAN_WRITES = 1e8;
        BIT_VAR_WRITES = 0.25*BIT_MEAN_WRITES;
      
        memory_lifetime_table;
        writes_performed_table;
        dead_bit_table;
        active_rows_array; 
    end
    
    methods
        function obj = MemoryArray(page_bytes, block_bytes, pages_num)
            %MEMORYARRAY Construct an instance of this class
            %   Detailed explanation goes here
            obj.PAGE_BYTES = page_bytes;
            obj.BLOCK_BYTES = block_bytes; 
            obj.PAGES_NUM = pages_num; %1000;
            obj.PAGE_ROWS = PAGE_BYTES/BLOCK_BYTES;
            obj.BITS_PER_BLOCK = BLOCK_BYTES*8;
            obj.ROWS_IN_MEMORY = PAGES_NUM * PAGE_ROWS;
            
            obj.memory_lifetime_table = zeros(PAGE_ROWS*PAGES_NUM, BITS_PER_BLOCK);
            for i = 1:ROWS_IN_MEMORY
                obj.memory_lifetime_table(i, :) = round(normrnd(BIT_MEAN_WRITES, BIT_VAR_WRITES, 1, BITS_PER_BLOCK));
            end
            obj.active_rows_array = ones(PAGES_NUM*PAGE_ROWS,1); 
            obj.dead_bit_table = zeros(PAGE_ROWS*PAGES_NUM, BITS_PER_BLOCK);
            obj.writes_performed_table = zeros(PAGE_ROWS*PAGES_NUM, BITS_PER_BLOCK);
        end
        
        function obj = writeToRow(obj, row_to_write, writes_performed)
            obj.writes_performed_table(row_to_write,:) = obj.writes_performed_table(row_to_write,:) + ... 
                                                        writes_performed*((randi(2,obj.BITS_PER_BLOCK,1)-1)');
            obj.dead_bit_table(row_to_write,:) = obj.writes_performed_table(row_to_write,:) > obj.memory_lifetime_table(row_to_write, :);
        end

        
        function num_of_pages = num_of_active_pages(obj)
            num_of_pages = sum(obj.active_rows_array(:))/obj.PAGE_ROWS;
        end
        
        function page_num = get_page_num_of_block(obj, block_num)
            page_num = ceil(block_num/obj.PAGE_ROWS);
        end
        
        function active_rows_list = get_active_rows(obj)
            active_rows_list = find(obj.active_rows_array > 0);
        end
        
        function is_dead = isMemoryDead(obj)
            is_dead = isempty(obj.active_rows_array);
        end
        
        function 
    end
end

